# coding:utf-8
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'video.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import queue
import os
import time

from Crypto.Cipher import AES
from urllib.parse import unquote
from math import ceil
from concurrent.futures import ThreadPoolExecutor, wait, ALL_COMPLETED
import re

from PyQt5.QtGui import *
from requests.adapters import HTTPAdapter
import sys
import requests
from requests.adapters import HTTPAdapter
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *


class LoginThread(QThread):
    start_login_signal = pyqtSignal(str)

    def __init__(self, signal):
        super().__init__()
        self.signal = signal

    def login_request(self, user_password_json):
        user_password_json = json.loads(user_password_json)
        # print(user_password_json.get('user_name'))
        # print(user_password_json.get('password'))
        url = 'https://dythvc08063ga.cfc-execute.bj.baidubce.com/login/index1'
        r = requests.post(url, json=user_password_json)
        # print(r.json())
        self.signal.emit(json.dumps(r.json()))

    def run(self):
        while True:
            # print('子线程正在执行。。。')
            time.sleep(1)


class MyWindow(QDialog):
    login_status = pyqtSignal(str)
    login_text = pyqtSignal(str)

    # status_text='ahhahah'
    def __init__(self):
        super().__init__()
        # self.res_status=None
        # self.setupUi(self)
        # self.init_ui()

    def init_ui(self):
        self.user_name = self.lineEdit_2
        self.password = self.lineEdit
        self.password.setEchoMode(QLineEdit.Password)
        self.browser = self.textBrowser
        self.login_btn = self.pushButton
        self.login_btn.clicked.connect(self.login)
        self.login_status.connect(self.status)
        self.login_thread = LoginThread(self.login_status)
        self.login_thread.start_login_signal.connect(self.login_thread.login_request)
        self.login_thread.start()

    def status(self, res):
        # print(res)
        res_status = json.loads(res)
        if res_status.get('errmsg') == '登录成功!':
            self.accept()
        self.browser.setText(res_status.get('errmsg'))
        self.browser.repaint()

        # self.login_text.connect(self.b.Open)

    def login(self):
        user_name = self.lineEdit_2.text()
        password = self.lineEdit.text()
        self.login_thread.start_login_signal.emit(json.dumps({'user_name': user_name, 'password': password}))

    # def new_window(self):
    #     print('----------')
    #     return 'hahahah'

    # class Ui_FieQQ(object):
    def setupUi(self, FieQQ):
        FieQQ.setObjectName("FieQQ")
        FieQQ.resize(752, 300)
        self.formLayoutWidget = QtWidgets.QWidget(FieQQ)
        self.formLayoutWidget.setGeometry(QtCore.QRect(20, 30, 241, 81))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.label_2 = QtWidgets.QLabel(self.formLayoutWidget)
        self.label_2.setObjectName("账号")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.lineEdit_2.setObjectName("账号输入框")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.lineEdit_2)
        self.label = QtWidgets.QLabel(self.formLayoutWidget)
        self.label.setObjectName("密码")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.lineEdit.setObjectName("密码输入框")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.formLayout.setItem(1, QtWidgets.QFormLayout.FieldRole, spacerItem)
        self.horizontalLayoutWidget = QtWidgets.QWidget(FieQQ)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(50, 160, 211, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton.setObjectName("登录")
        # self.pushButton.clicked.connect(self.login)

        self.horizontalLayout.addWidget(self.pushButton)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_2.setObjectName("忘记密码")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.textBrowser = QtWidgets.QTextBrowser(FieQQ)
        self.textBrowser.setGeometry(QtCore.QRect(295, 21, 411, 231))
        self.textBrowser.setObjectName("信息显示框")
        self.retranslateUi(FieQQ)
        QtCore.QMetaObject.connectSlotsByName(FieQQ)

    def retranslateUi(self, FieQQ):
        _translate = QtCore.QCoreApplication.translate
        FieQQ.setWindowTitle(_translate("FieQQ", "登录"))
        self.label_2.setText(_translate("FieQQ", "账号："))
        self.label.setText(_translate("FieQQ", "密码："))
        self.pushButton.setText(_translate("FieQQ", "登录"))
        self.pushButton_2.setText(_translate("FieQQ", "忘记密码"))


class DownThread(QThread):
    download_proess_signal = pyqtSignal(int)

    def __init__(self, down_text, url):
        super().__init__()
        self.url = url
        self.down_text=down_text
        self.name = self.get_name(self.url)
        self.m3u8 = self.get_m3u8(self.name)
        self.file_name = unquote(url.split('/')[3].split('.')[0], 'utf-8')
        self.download_path = down_text + '/madou-download/'  # 当前文件夹下的download文件夹
        if not os.path.exists(self.download_path):  # 判断文件夹或文件
            os.makedirs(self.download_path)
        self.r2_content_list = []
        self.number = 0

    def run(self):
        # url = 'https://madou.club/91%e5%88%b6%e7%89%87%e5%8e%82-%e5%b0%91%e5%a5%b3%e7%9a%84%e6%82%94%e6%82%9f-%e6%bd%98%e7%94%9c%e7%94%9c-av%e5%bc%95%e9%80%80.html'
        # url = input('请输入视频链接:')
        try:
            self.pares_m3u8()
        except Exception as e:
            QMessageBox.information(self, "提示", "下载失败!")

    def get_m3u8(self, name):
        m3u8_url = f'https://dash.madou.club/share/{name}'
        r1 = requests.get(m3u8_url)
        token = re.search(r'var token = "(.*?)";', r1.text).group(1)
        m3u8 = f'https://dash.madou.club/videos/{name}/index.m3u8?token=' + token
        return m3u8

    # 下载ts
    def down_begin(self, ts_list, name, number):
        try:
            for ts in ts_list:
                ts_url = f'https://dash.madou.club/videos/{name}/{ts}'
                r2 = requests.get(ts_url)
                with open(self.download_path + ts + '--', 'wb')as f:
                    f.write(r2.content)
                print(ts + '已下载')
                self.number += 1
                proess = (self.number / number) * 100
                self.download_proess_signal.emit(int(proess))
        except Exception as e:
            QMessageBox.information(self, "提示", "下载失败!")

    def test(self, lst, num):
        return list(map(lambda x: lst[x * num: x * num + num], list(range(0, ceil(len(lst) / num)))))

    def pares_m3u8(self):
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0',
            'referer': f'https://dash.madou.club/share/{self.name}'
        }
        r = requests.get(self.m3u8, headers=headers)
        ts_list = re.findall(r',\n(.*?)\n', r.text)
        key_url = f'https://dash.madou.club//videos/{self.name}/ts.key'
        r3 = requests.get(key_url)
        key = r3.text
        test_list = self.test(ts_list, len(ts_list) // 25)
        executor = ThreadPoolExecutor(max_workers=32)
        work_list = [executor.submit(self.down_begin, ts_list=i, name=self.name, number=len(ts_list)) for i in
                     test_list]
        wait(fs=work_list, return_when=ALL_COMPLETED)
        for ts in ts_list:
            with open(self.download_path + ts + '--', 'rb')as f2:
                content = f2.read()
            cryptor = AES.new(key.encode('utf-8'), AES.MODE_CBC)
            with open(self.download_path + ts, 'ab+') as file:
                file.write(cryptor.decrypt(content))
            # print(ts + '已下载')
        # 读取列表信息合成视频并输出
        with open(self.download_path+self.file_name + '.mp4', 'wb+') as fw:
            for ts_name in ts_list:
                fw.write(open(self.download_path + ts_name, 'rb').read())
        print('合并完成')
        for i in ts_list:
            os.remove(self.download_path + i)
            os.remove(self.download_path + i + '--')
        # os.remove(self.download_path + self.file_name + '.mp4')
        # os.rmdir(self.down_text+'/madou-download/')

    @staticmethod
    def get_name(url):
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.79 Safari/537.36',
            'referer': 'https://madou.club/',
            'Connection': 'close'
        }
        sess = requests.Session()
        sess.mount('http://', HTTPAdapter(max_retries=3))
        sess.mount('https://', HTTPAdapter(max_retries=3))
        sess.keep_alive = False  # 关闭多余连接
        requests.adapters.DEFAULT_RETRIES = 5
        r = requests.get(url, headers=headers, stream=True, verify=False, timeout=(5, 5))
        name = re.search(r'https://dash.madou.club/share/(.*?) ', r.text).group(1)
        r.close()
        return name


class MyWindow2(QMainWindow):
    def __init__(self):
        super().__init__()
        # self.init_ui()

    def init_ui(self):
        self.path_btn.clicked.connect(self.input_pp_sgy)
        self.down_btn.clicked.connect(self.download)
        self.textBrowser.setText('           暂无下载')
        self.pgb = self.progressBar
        self.pgb.setStyleSheet(
            "QProgressBar { border: 2px solid grey; border-radius: 5px; color: rgb(20,20,20);  background-color: #FFFFFF; text-align: center;}QProgressBar::chunk {background-color: rgb(100,200,200); border-radius: 10px; margin: 0.1px;  width: 1px;}")
        ## 其中 width 是设置进度条每一步的宽度
        ## margin 设置两步之间的间隔
        # 设置字体
        font = QFont()
        font.setBold(True)
        font.setWeight(30)
        self.pgb.setFont(font)
        # 设置一个值表示进度条的当前进度
        self.pv = 0
        # 申明一个时钟控件
        self.timer1 = QBasicTimer()

        # 设置进度条的范围
        self.pgb.setMinimum(0)
        self.pgb.setMaximum(100)
        self.pgb.setValue(self.pv)
        ## 设置进度条文字格式
        self.pgb.setFormat('Downloads  %p%'.format(self.pgb.value() - self.pgb.minimum()))

    def download(self):
        try:
            self.textBrowser.setText('    正在下载。。。')
            self.down_text = self.down_address.text()
            self.down_thread = DownThread(self.down_text, self.video_address.text())
            self.down_thread.download_proess_signal.connect(self.set_progressbar_value)
            self.down_thread.start()
        except:
            QMessageBox.information(self, "提示", "下载失败!")

    # 设置进度条
    def set_progressbar_value(self, value):
        self.progressBar.setValue(value)

        if value == 100:
            QMessageBox.information(self, "提示", "下载成功！")
            self.textBrowser.setText('           下载完成!')
            return

    def input_pp_sgy(self):
        directory = QtWidgets.QFileDialog.getExistingDirectory(None, "请选择文件夹路径")
        # paths.append(directory)
        self.down_address.setText(directory)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(877, 586)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        MainWindow.setMouseTracking(False)
        MainWindow.setToolTipDuration(-2)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # self.centralwidget.setStyleSheet('''QWidget{background-color:rgb(204, 204, 204);}''')
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(120, 20, 521, 31))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(120, 50, 411, 31))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.down_btn = QtWidgets.QPushButton(self.centralwidget)
        self.down_btn.setGeometry(QtCore.QRect(350, 240, 151, 31))
        self.down_btn.setObjectName("down_btn")
        self.video_address = QtWidgets.QLineEdit(self.centralwidget)
        self.video_address.setGeometry(QtCore.QRect(190, 110, 531, 31))
        self.video_address.setInputMask("")
        self.video_address.setObjectName("video_address")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(120, 110, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(170, 300, 579, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(340, 390, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.textBrowser.setFont(font)
        self.textBrowser.setObjectName("textBrowser")
        self.down_address = QtWidgets.QLineEdit(self.centralwidget)
        self.down_address.setGeometry(QtCore.QRect(200, 180, 401, 31))
        self.down_address.setObjectName("down_address")
        self.path_btn = QtWidgets.QPushButton(self.centralwidget)
        self.path_btn.setGeometry(QtCore.QRect(610, 180, 111, 31))
        self.path_btn.setObjectName("path_btn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 877, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "国产AV视频下载器"))
        self.label_2.setText(_translate("MainWindow", "1.本软件适用于下载麻豆社(https://madou.club/)所有视频"))
        self.label_3.setText(_translate("MainWindow", "2.开始下载前请确保VPN设置为全局代理模式"))
        self.down_btn.setText(_translate("MainWindow", "开始下载"))
        self.video_address.setPlaceholderText(_translate("MainWindow", "请在这里粘贴视频播放页地址"))
        self.label.setText(_translate("MainWindow", "地址："))
        self.path_btn.setText(_translate("MainWindow", "选择下载路径"))
        self.menu.setTitle(_translate("MainWindow", "已登录"))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    login_ui = MyWindow()
    login_ui.setWindowIcon(QIcon('hh.ico'))
    login_ui.setupUi(login_ui)
    login_ui.init_ui()
    if login_ui.exec_() == QDialog.Accepted:
        # 初始化主功能窗口
        w = MyWindow2()
        w.setWindowIcon(QIcon('favicon.ico'))
        w.setupUi(w)
        w.init_ui()
        w.show()
        # 设置应用退出
        sys.exit(app.exec_())
